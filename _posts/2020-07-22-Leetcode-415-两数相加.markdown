# 415. 两数相加II
## https://leetcode-cn.com/problems/add-two-numbers-ii/
### 题目描述：  
	给你两个 非空 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。

	你可以假设除了数字 0 之外，这两个数字都不会以零开头。

	 

	进阶：

	如果输入链表不能修改该如何处理？换句话说，你不能对列表中的节点进行翻转。

	 

	示例：

	输入：(7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
	输出：7 -> 8 -> 0 -> 7
### 链表、栈
	链表相加做逆序处理，所以使用栈  
	在相加过程中需要做进位处理

### 代码：
     public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if (l1 == null) return l2;
        if (l2 == null) return l1;

        Stack<Integer> stack1 = new Stack();
        Stack<Integer> stack2 = new Stack();

        while (l1 != null) {
            stack1.push(l1.val);
            l1 = l1.next;
        }

        while (l2 != null) {
            stack2.push(l2.val);
            l2 = l2.next;
        }

        ListNode head = new ListNode(0);
        int extra = 0;

        while (!stack1.isEmpty() || !stack2.isEmpty()) {
            int val1 = stack1.isEmpty() ? 0 : stack1.pop();
            int val2 = stack2.isEmpty() ? 0 : stack2.pop();
            int sum = val1 + val2 + extra;
            ListNode node = new ListNode(sum % 10);

            ListNode temp = head.next;
            head.next = node;
            node.next = temp;

            extra = sum >= 10 ? 1 : 0;
        }
        if (extra == 1) {
            ListNode node = new ListNode(1);
            ListNode temp = head.next;
            head.next = node;
            node.next = temp;
        }         
        return head.next;
    }

