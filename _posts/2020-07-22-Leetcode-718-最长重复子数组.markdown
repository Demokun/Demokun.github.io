# 718. 最长重复子数组
## https://leetcode-cn.com/problems/maximum-length-of-repeated-subarray/
### 题目描述：  
	给两个整数数组 A 和 B ，返回两个数组中公共的、长度最长的子数组的长度。

	 

	示例：

	输入：
	A: [1,2,3,2,1]
	B: [3,2,1,4,7]
	输出：3
	解释：
	长度最长的公共子数组是 [3, 2, 1] 

### 动态规划  
		dp：
			dp[i][j] 表示以i，j结尾的最长重复子数组
			dp[i][j] = dp[i - 1][j - 1] + 1
		dp结果的前后关系：
			A[1,2,3,4,5]------------i
			B[2,3,4,5,6]------------j
			从后往前观察数组，如果A[i] == B[j] 则需要观察其前缀，即A[i - 1]和B[j - 1]是否相等，以此类推，易得出上述递推公式 

### 代码：
    public int findLength(int[] A, int[] B) {
        if (A == null || A.length == 0 || B == null  || B.length == 0) return 0;
        int[][] dp = new int[A.length][B.length];
        int max = 0;
        for (int i = 0; i < A.length; i ++) {
            for (int j = 0; j < B.length; j ++) {
                if (A[i] == B[j]) {
                    if (i == 0 || j == 0) {
                        dp[i][j] = 1;
                    } else {
                        dp[i][j] = dp[i - 1][j - 1] + 1;
                        max = max > dp[i][j] ? max : dp[i][j];
                    }
                } else {
                    dp[i][j] = 0;
                }
            }
        }
        return max;
    }


