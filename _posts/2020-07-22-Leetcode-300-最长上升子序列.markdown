# 435. 无重叠区间
## https://leetcode-cn.com/problems/non-overlapping-intervals/
### 题目描述：  
	给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。
	注意:

	可以认为区间的终点总是大于它的起点。
	区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。
	示例 1:

	输入: [ [1,2], [2,3], [3,4], [1,3] ]

	输出: 1

	解释: 移除 [1,3] 后，剩下的区间没有重叠。
	示例 2:

	输入: [ [1,2], [1,2], [1,2] ]

	输出: 2

	解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。
	示例 3:

	输入: [ [1,2], [2,3] ]

	输出: 0

	解释: 你不需要移除任何区间，因为它们已经是无重叠的了。 
### 最长上升子序列  
		将问题转换成最长上升子序列的问题：
			1. 结果： 移除数组最小个数 = 等于数组个数-最长无重复子数组的个数 
			2. 无重复子数组等价于区间的起始大于等前面区间的结束  
			3. 数组需要进行排序
### 代码：
	    public int eraseOverlapIntervals(int[][] intervals) {
        if (intervals == null || intervals.length == 0) return 0;
        int[] dp = new int[intervals.length];
        int max = 1;
        dp[0] = 1;
        Arrays.sort(intervals, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                if(a[0] == b[0]) {
                    return a[1] - b[1];
                }
                
                return a[0] - b[0];
            }
        });
        for (int i = 1; i < intervals.length; i ++) {
            dp[i] = 1;
            for (int j = 0; j < i; j ++) {
                if (intervals[i][0] >= intervals[j][1]) {
                    dp[i] = dp[i] > dp[j] ? dp[i] : dp[j] + 1;
                    max = max > dp[i] ? max : dp[i];
                }
            }
        }
        return intervals.length - max;
    }


