# Java并发编程实战-第二章-线程安全性  

##	线程安全的本质：  
		线程安全在于对象状态的变化是否是线程安全的：
			1. 编写线程安全的代码的核心在于要对状态访问操作进行管理，特别是对共享的和可变的状态的访问  
			2. 对象的状态是指存储在状态变量中的数据  
			3. 共享意味着变量可以由多个线程同时访问，而可变则意味着变量的值在其生命周期内可以发生变化  
		需要考虑对象的线程安全问题的前提：  
			1. 一个对象是否需要是线程安全的，取决于它是否被多个线程访问，这指的是在程序中访问对象的方式，而不是对象要实现的功能  
			2. 当多个线程访问某个状态变量并且其中有一个线程执行写入操作时，必须采用同步机制来协同这些线程对变量的访问  
		线程安全的实现手段：同步  
		Java的同步机制：synchronized（主要） volatile 显式锁 原子变量  
		线程安全类和线程安全程序  
			完全由线程安全类构成的程序并不一定是线程安全的  
			线程安全类中也可以包含非线程安全的类  
		总结：线程安全指的是对象在被多个线程访问时仍能正确的执行，这就要求对象的状态变化不能因线程的调用顺序改变而改变，因此需要引入同步机制来保证状态的变化  
## 2.1 什么是线程安全性  
		正确性：  
			某个类的行为与其规范完全一致  
		线程安全性：  
			当多个线程访问某个类时，这个类始终都能表现出正确的行为，那么就称这个类是线程安全的  
		无状态对象在多线程中没有可以共享的状态，在计算中的临时状态仅存在于线程栈上的局部变量中，并且只能由正在执行的线程访问， 所以无状态对象一定都是线程安全的
## 2.2 原子性  
		原子操作被作为一个不可分割的操作来执行  
### 2.2.1 竞态条件  
		当某个计算的正确性取决于多个线程交替执行时序时，那么就会发生竞态条件  
			最常见的竞态条件类型就是“先检查后执行”操作，即通过一个可能失效的观测结果来决定下一步的动作  
				首先观察到某个条件为真，然后根据这个观察结果采用相应的动作，但事实上，在观察到这个结果以及开始采用动作之间，观察结果可能变得无效（状态已经被改变），从而导致各种问题  
### 2.2.2 示例  
		延迟初始化  
### 2.2.3 复合操作  
		要避免竞态条件问题，就必须在某个线程修改该变量时，通过某种方式防止其他线程使用这个变量，从而确保其他线程只能在修改操作完成之前或之后读取和修改状态，而不是在修改状态的过程中  
		原子操作： 对于访问同一个状态的所有操作（包括该操作本身）来说，这个操作是一个以原子方式执行的操作  
		复合操作： 包含了一组必须以原子方式执行的操作  
		通过确保多线程中操作的原子性来保证线程安全  
			使用线程安全类  
		当在无状态的类中添加一个状态时，如果该状态完全由线程安全的对象来管理，那么这个类仍然是线程安全的  
		当类中有多个状态变量时，不光要保证每一个状态变量的操作是原子性的，还要考虑是否仍然存在竞态条件    
## 2.3 加锁机制  
		当在不变性条件中设计多个变量时，各个变量之间并不是彼此独立的，而是某个变量的值会对其他变量的值产生约束，因此，当更新某一个变量时，需要在同一个原子操作中对其他变量同时进行更新  
		要保持状态的一致性，就需要在单个原子操作中更新所有相关的状态变量  
### 2.3.1 内置锁  
		Java提供了一种内置的锁机制来支持原子性：同步代码块  
		同步代码块包括两部分：一个作为锁的对象引用，一个作为由这个锁保护的代码块  
		synchronized内置锁:  
			1. 何时申请和释放锁： 以synchronized来修饰的方法就是一种横跨整估方法体的同步代码块（当线程进入该方法时需要申请内置锁）  
			2. 锁的范围： 其中该同步代码块的锁就是方法调用所在的对象（锁的范围是整个对象） 
			3. 被内置锁保护的代码以原子方式执行  
		内置锁（监视器锁）  
			1. 每个Java对象都可以用做一个实现同步的锁，这些锁被称为内置锁或监视器锁  
			2. 内置锁是一种互斥体（互斥锁），最多只有一个线程能持有这种锁，当A持有锁时，B如果想使用同样的锁则必须进入等待状态，这有可能导致活跃性问题（死锁等）  
			3. 内置锁的代码块范围过大会导致并发性糟糕的性能问题  
### 2.3.2 重入  
		当某个线程请求一个由其他线程持有的锁时，发出请求的线程就会阻塞，可重入可以在某个线程试图获得一个已经由它自己持有的锁时，这个请求会成功  
		重入的实现：  
			维护一个引用计数器和一个所有者线程  
			当计数器为0时，这个锁被认为没被任何线程持有  
			当线程请求一个未被持有的锁时，JVM记录下锁的持有者，并将计数器置为1  
			当同一个线程再次请求这个锁时，则将计数器加1  
			当线程退出同步代码块时，计数器递减  
		重入提升了代码的封装性  
## 2.4 用锁来保护状态  
		如果用同步来协调对某个变量的访问，那么在访问这个变量的所有位置上都需要使用同步  
		而且，当使用锁来协调对某个变量的访问时，在访问变量的所有位置上都要使用同一个锁（变量被这个锁保护） 

		如果不加区别地滥用synchronized，可能导致程序中出现过多的同步  
## 2.5 活跃性与性能  
		对整个方法使用的粗粒度同步会导致性能问题（不良并发），而粒度过细的同步会导致程序在获取和释放锁的过程中花费太多开销  
		好的策略是在会产生竞态条件的代码块中使用同步的前提下，尽可能使耗时较长的代码块不被同步  




