# Java并发编程实战-第一章-简介.md   


## 1.1 并发简史
	进程（计算机多个程序同时执行）  
	早期计算机没有操作系统一次只能执行一个程序，操作系统的出现使得计算机可以同时执行多个程序 
	    操作系统为进程分配资源，并提供通信机制 
		1. 操作系统为每个独立执行的进程分配资源：内存、文件句柄以及安全证书等    
		2. 在不同的进程中通过一些粗粒度的通信机制来交换数据：套接字、信号处理器、共享内存、信号量以及文件等  
	并发的好处：
		1. 资源利用率  
		2. 公平性  
		3. 便利性  
	每个进程相当于一个串行的计算机  
	线程(进程中多个任务同时执行，需要数据共享机制来保证安全性)：  
		线程允许在同一个进程中执行多个程序控制流
		线程会共享进程范围内的资源：文件句柄以及内存句柄等
		线程有各自的程序计数器、栈（程序控制和方法加载）以及局部变量等  
		同一个进程的多个线程可以被同时调度到多个CPU上运行  

	线程也被称为轻量级进程，操作系统大多以线程为基本调度单位  

	总结：    
		1. 和串行执行程序相比，进程和线程执行效率更高，能够有效利用资源，保证多个任务的公平性（资源和执行顺序），以及将不同类型的任务分别启动一个进程（线程），在必要的时候进行通讯，从而降低程序的复杂性。  
		2. 进程和线程都有因为资源共享所带来的问题，因此需要来保证安全性（共享变量不会因多线程的同时访问出现预期之外的结果）和活跃性（死锁等资源占用问题）等。  
## 1.2 线程的优势  
	1.2.1 发挥多处理器的强大能力——资源利用率  
		1. 多个线程可以同时在多个处理器上同时执行，提升资源利用率  
		2. 多个线程也可以提高在单个处理器上的资源利用率，当一个线程阻塞时，另一个线程可以开始执行  
	1.2.2  建模的简单性——便利性  
		1. 单线程执行多种任务类型的任务时会有额外开销，多线程可以将不同类型的任务放在不同的线程中执行，并提供通信机制  
	1.2.3  异步事件的简化处理    
		1. 服务器端为每个请求分配一个线程，多路I/O  
	1.2.4 响应更灵敏的用户界面  
## 1.3 线程带来的风险  
	1.3.1 安全性问题（永远不发生糟糕的事情）  
		  	在单线程中可以运行的代码，在多线程中会遇到安全性问题  
		  	如果不使用同步机制，会使程序运行的结果取决于线程执行的顺序，引发安全性问题  
	1.3.2 活跃性问题（某件正确的事情最终会发生）
		  	线程的资源占用和等待会导致死锁、饥饿等问题  
	1.3.3 性能问题
			线程调度器挂起一个线程转而运行另一个线程时发生的上下文切换操作  
			同步机制  
## 1.4 线程无处不在
		1. Timer
		2. Servlet和JSP  
		3. 远程方法调用（RMI）  
		4. Swing和AWT  
		




