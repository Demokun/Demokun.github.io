# 646. 最长对数链
## https://leetcode-cn.com/problems/maximum-length-of-pair-chain/
### 题目描述：  
	给出 n 个数对。 在每一个数对中，第一个数字总是比第二个数字小。

	现在，我们定义一种跟随关系，当且仅当 b < c 时，数对(c, d) 才可以跟在 (a, b) 后面。我们用这种形式来构造一个数对链。

	给定一个对数集合，找出能够形成的最长数对链的长度。你不需要用到所有的数对，你可以以任何顺序选择其中的一些数对来构造。

	示例 :

	输入: [[1,2], [2,3], [3,4]]
	输出: 2
	解释: 最长的数对链是 [1,2] -> [3,4]
### 最长上升子序列、无重复子区间  
		该问题很容易转换成无重叠子区间问题

### 代码：
	public int findLongestChain(int[][] pairs) {
        if (pairs == null || pairs.length == 0) return 0;
        int[] dp = new int[pairs.length];
        int max = 1;
        dp[0] = 1;
        Arrays.sort(pairs, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                if(a[0] == b[0]) {
                    return a[1] - b[1];
                }
                return a[0] - b[0];
            }
        });
        for (int i = 1; i < pairs.length; i ++) {
            dp[i] = 1;
            for (int j = 0; j < i; j ++) {
                if (pairs[i][0] > pairs[j][1]) {
                    dp[i] = dp[i] > dp[j] ? dp[i] : dp[j] + 1;
                    max = max > dp[i] ? max : dp[i];
                }
            }
        }
        return max;
    }


